# -*- coding: utf-8 -*-
"""Inference_1B

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19RbeqMcQwazIlcg5uFcOTSSfoxn5F3vm
"""

import streamlit as st
import numpy as np
import pandas as pd
import pickle
import joblib

st.markdown("""
    <style>
        /* Import Poppins and Playfair Display fonts from Google Fonts */
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&family=Playfair+Display:wght@600;700&display=swap');

        body {
            background-color: #2C3930;
            color: #DCD7C9;
            font-family: 'Poppins', sans-serif;
        }

        .stApp {
            background-color: #2C3930;
        }

        .stTitle {
            color: #DCD7C9;
            font-size: 18px;
            font-weight: 700;
            text-align: center;
            font-family: 'Playfair Display', serif;
        }

        .stHeader, h3, .stSubheader {
            color: #DCD7C9;
            font-family: 'Poppins', sans-serif;
        }

        .stButton {
            display: flex;
            justify-content: center;
        }

        .stButton>button {
            background-color: #6E8E59;
            color: #DCD7C9;
            font-size: 18px;
            padding: 12px 20px;
            border-radius: 10px;
            border: none;
            font-weight: 600;
            box-shadow: 0 4px 10px rgba(110, 142, 89, 0.3);
            transition: 0.3s;
            font-family: 'Poppins', sans-serif;
        }

        .stButton>button:hover {
            background-color: #5c7749;
        }

        .stSlider .st-bb {
            font-size: 15px;
            font-weight: 600;
            color: #DCD7C9;
        }

        .stSelectbox, .stNumberInput, .stTextInput>div>input {
            background-color: #3F4F44;
            color: #DCD7C9;
            border-radius: 10px;
            border: 1px solid #6E8E59;
            padding: 8px;
            font-size: 16px;
            font-family: 'Poppins', sans-serif;
        }

        .stSelectbox>div, .stNumberInput>div {
            font-weight: 600;
            color: #DCD7C9;
        }

        .stSidebar {
            background-color: #3F4F44;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 12px rgba(255, 255, 255, 0.05);
            color: #DCD7C9;
        }

        .stMarkdown, .stWrite, .stText, .stRadio, .stSelectbox label, .stNumberInput label {
            font-size: 17px;
            line-height: 1.6;
            color: #DCD7C9;
            font-family: 'Poppins', sans-serif;
        }

        ul {
            list-style-type: disc;
        }

        ul li::marker {
            color: #A27B5C;
        }

        .emoji {
            font-size: 26px;
            margin-right: 10px;
        }

        .stTextInput>div>input {
            background-color: #3F4F44;
            color: #DCD7C9;
            border-radius: 8px;
            border: 1px solid #6E8E59;
        }

        .stTextArea textarea {
            background-color: #3F4F44;
            color: #DCD7C9;
            border: 1px solid #6E8E59;
            border-radius: 8px;
        }

        .stButton>button, .stSelectbox, .stNumberInput {
            transition: all 0.3s ease-in-out;
        }
    </style>
""", unsafe_allow_html=True)

def main():
    st.title("🏨 Hotel Booking Cancellation Prediction 🏨")
    st.write("""
      Welcome to **INN Hotels**' Booking Analyzer! ✨

      Hotel managers, enhance your booking strategy with this tool that predicts whether a booking will be canceled based on guest details.

      Fill in the reservation information below, and let’s forecast your booking’s status to optimize room occupancy and improve guest experience! 📊💡
      """)

    st.subheader("⏳ Stay Duration")
    no_of_weekend_nights = st.slider("Weekend Nights", min_value = 0, max_value = 7, value = 1)
    no_of_week_nights = st.slider("Week Nights", min_value = 1, max_value = 20, value = 2)

    # layout grid for input data (so there are 2 column shown)
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("🧑‍🤝‍🧑 Guest Information")
        no_of_adults = st.slider("Number of Adults", min_value = 0, max_value = 10, value = 2)
        no_of_children = st.slider("Number of Children", min_value = 0, max_value = 10, value = 0)
        repeated_guest_display = st.selectbox("Returning Guest?", ["Yes", "No"])
        no_of_special_requests = st.slider("Special Requests", min_value = 0, max_value = 5, value = 0)

    with col2:
        st.subheader("💸 Financial Details")
        market_segment_type = st.selectbox("💼 Tipe Market", ['Offline', 'Online', 'Corporate', 'Aviation', 'Complementary'])
        avg_price_per_room = st.number_input("💶 Average Price per Room (€)", min_value = 0.0, max_value = 500.0, value = 100.0, step = 5.00)
        no_of_previous_cancellations = st.slider("Previous Cancellations", min_value = 0, max_value = 10, value = 0)
        no_of_previous_bookings_not_canceled = st.slider("Previous Non-Canceled Bookings", min_value = 0, max_value = 10, value = 1)

    st.subheader("🛏️ Booking Details")
    lead_time = st.number_input("⏳ Lead Time (Days before arrival)", min_value = 0, max_value = 365, value = 10)
    arrival_year = st.selectbox("Arrival Year", [2017, 2018])
    arrival_month = st.slider("Arrival Month", min_value = 1, max_value = 12, value = 1)
    arrival_date = st.slider("Arrival Date", min_value = 1, max_value = 31, value = 1)
    room_type_reserved = st.selectbox("Room Type", ['Room_Type 1', 'Room_Type 2', 'Room_Type 3', 'Room_Type 4', 'Room_Type 5', 'Room_Type 6', 'Room_Type 7'])
    type_of_meal_plan = st.selectbox("Meal Plan", ['Meal Plan 1', 'Meal Plan 2', 'Meal Plan 3', 'Not Selected'])
    required_car_parking_space_display = st.selectbox("Car Parking Space Needed?", ["No", "Yes"])

    required_car_parking_space = 1 if required_car_parking_space_display == "Yes" else 0
    repeated_guest = 1 if repeated_guest_display == "Yes" else 0

    # manual One-hot encoding for categorical variables
    # meal plan
    meal_plan_columns = ['Meal Plan 1', 'Meal Plan 2', 'Meal Plan 3', 'Not Selected']
    meal_plan = [1 if type_of_meal_plan == mp else 0 for mp in meal_plan_columns]
    # room type reserved
    room_type_columns = ['Room_Type 1', 'Room_Type 2', 'Room_Type 3', 'Room_Type 4', 'Room_Type 5', 'Room_Type 6', 'Room_Type 7']
    room_type = [1 if room_type_reserved == rt else 0 for rt in room_type_columns]
    # market segment type
    market_segment_columns = ['Offline', 'Online', 'Corporate', 'Aviation', 'Complementary']
    market_segment = [1 if market_segment_type == ms else 0 for ms in market_segment_columns]


    input_data = {
    'no_of_adults': no_of_adults,
    'no_of_children': no_of_children,
    'no_of_weekend_nights': no_of_weekend_nights,
    'no_of_week_nights': no_of_week_nights,
    'required_car_parking_space': required_car_parking_space,
    'lead_time': lead_time,
    'arrival_year': 0 if arrival_year == 2017 else 1,
    'avg_price_per_room': avg_price_per_room,
    'no_of_previous_cancellations': no_of_previous_cancellations,
    'no_of_previous_bookings_not_canceled': no_of_previous_bookings_not_canceled,
    'no_of_special_requests': no_of_special_requests,
    }

    # combine onehot to input_data
    input_data.update(dict(zip(meal_plan_columns, meal_plan)))
    input_data.update(dict(zip(room_type_columns, room_type)))
    input_data.update(dict(zip(market_segment_columns, market_segment)))

    # convert to dataframe
    input_df = pd.DataFrame([input_data])

    # load the trained model (pickled)
    model = joblib.load('best_model.pkl')

    # prediction button
    if st.button("Predict Booking Status"):
        prediction = model.predict(input_df)[0]
        probability = model.predict_proba(input_df)[0][1]  # Probability of cancellation (class 1)

        if prediction == 1:
            st.error(f"❌ Booking is likely to be canceled with a probability of {probability:.2%}.")
        else:
            st.success(f"✅ Booking is likely to be confirmed (Not Canceled) with a probability of {(1 - probability):.2%}.")

if __name__ == '__main__':
    main()

# !npm install localtunnel

# ! stramlit run /content/inference_1b.py &> /content/logs.txt &

# !curl ipv4.icanhazip.com

# !npx localtunnel -- port 8501

